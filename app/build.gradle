apply plugin: 'com.android.application'

android {
    compileSdkVersion 26
    defaultConfig {

        applicationId "com.zf.sticker.sticker"
        minSdkVersion 16
        targetSdkVersion 26
        versionCode 7
        versionName "7.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        multiDexEnabled true
    }

    signingConfigs {
        release
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release

            //配置apk名称
            applicationVariants.all {
                variant ->
                    if (variant.buildType.name.equals('release')) {
                        variant.outputs.each {output ->
                            def outputFile = output.outputFile
                            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                                def fileName = "${defaultConfig.applicationId}_(Release)_V${defaultConfig.versionName}_C${defaultConfig.versionCode}_(Build${releaseTime()}).apk"
                                output.outputFileName = new File(fileName)
                            }
                        }
                    }
            }
        }
    }
}

def releaseTime() {
    return new Date().format("yyyyMMddHHmm", TimeZone.getTimeZone("Asia/Chongqing"))
}

def Properties props = new Properties()
def propFile = new File('/root/xi.properties')
if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))

    if (props != null && props.containsKey('STORE_FILE') && props.containsKey('KEY_ALIAS') && props.containsKey('PASSWORD')) {
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['PASSWORD']
    } else {
        println 'signing.properties found but some entries are missing'
        android.buildTypes.release.signingConfig = null
    }
} else {
    println 'signing.properties not found'
    android.buildTypes.release.signingConfig = null
}


repositories {
    jcenter()
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
    implementation 'com.android.support:design:26.1.0'
    implementation 'com.isseiaoki:simplecropview:1.1.7'
    implementation 'com.flying.xiaopo:sticker:1.6.0'
    implementation 'com.github.bumptech.glide:glide:3.7.0'
//    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    implementation 'io.reactivex:rxandroid:1.2.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.8'
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava:2.3.0'
    implementation 'org.greenrobot:eventbus:3.1.1'
    implementation 'com.android.support:cardview-v7:26.1.0'
    implementation 'com.liulishuo.filedownloader:library:1.7.1'
    implementation 'com.android.support:multidex:1.0.1'

//    implementation project(':AdsLib')
//    implementation project(':admob_lite')
//    implementation project(':facebook')
//    implementation project(':rate')

    implementation 'com.yanzhenjie:permission:1.1.2'
}
